import streamlit as st
import requests
from typing import List
import os
from dotenv import load_dotenv
from dataclasses import dataclass
from PIL import Image
from loguru import logger
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()  # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π handler
logger.add(
    sys.stdout,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>frontend:{function}:{line}</cyan> - <level>{message}</level>",
    level="INFO"
)
logger.add(
    "logs/frontend.log",
    rotation="500 MB",
    retention="10 days",
    compression="zip",
    level="DEBUG"
)

@dataclass
class Message:
    content: str
    type: str

def get_completion(message: str, history: List[Message]) -> dict:
    """Send request and get completion."""
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ N —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    MAX_HISTORY_LENGTH = 10
    filtered_history = history[-MAX_HISTORY_LENGTH:] if len(history) > MAX_HISTORY_LENGTH else history
    
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±—ç–∫–µ–Ω–¥")
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(filtered_history)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
    for msg in filtered_history:
        logger.debug(f"- {msg.type}: {msg.content[:100]}...")
    
    try:
        response = requests.post(
            "http://backend:8000/completion",
            json={
                "message": message,
                "history": [{"content": msg.content, "type": msg.type} for msg in filtered_history]
            }
        )
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞")
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±—ç–∫–µ–Ω–¥—É: {str(e)}")
        raise

def get_voice(text: str, voice: str = "zabelin") -> bytes:
    """Get voice synthesis from TTS service."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        response = requests.get(
            os.getenv("SK_API_EP"),
            params={"text": text, "voice": voice}
        )
        response.raise_for_status()
        logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ-–æ—Ç–≤–µ—Ç")
        return response.content
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {str(e)}")
        raise

def main():
    try:
        # Setup page
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        logo = Image.open('frontend/images/logo.png')
        resized_logo = logo.resize((100, 100))
        st.set_page_config(page_title="–ó–∞–±–µ–ª–∏–Ω —á–∞—Ç-–±–æ—Ç", page_icon="")
        st.image(resized_logo)
        st.title('üìñ –ó–∞–±–µ–ª–∏–Ω —á–∞—Ç-–±–æ—Ç')
        
        # Initialize session state with additional parameters
        if "messages" not in st.session_state:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏")
            st.session_state.messages = [Message(content="–ü—Ä–∏–≤–µ—Ç, —è –ù–∏–∫–∏—Ç–∞ –ó–∞–±–µ–ª–∏–Ω! –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", type="ai")]
        if "conversation_started" not in st.session_state:
            st.session_state.conversation_started = False
        
        # Add conversation management UI
        with st.sidebar:
            if st.button("–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"):
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
                st.session_state.messages = [Message(content="–ü—Ä–∏–≤–µ—Ç, —è –ù–∏–∫–∏—Ç–∞ –ó–∞–±–µ–ª–∏–Ω! –ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", type="ai")]
                st.session_state.conversation_started = False
                st.rerun()
        
        # Display messages
        for msg in st.session_state.messages:
            st.chat_message(msg.type).write(msg.content)
        
        # Handle user input
        if prompt := st.chat_input():
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {prompt[:100]}...")
            
            # Add user message
            st.chat_message("human").write(prompt)
            st.session_state.messages.append(Message(content=prompt, type="human"))
            
            # Get completion from backend
            response = get_completion(prompt, st.session_state.messages)
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –¥–ª–∏–Ω–æ–π {len(response['response'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # Display AI response
            st.chat_message("ai").write(response["response"])
            st.session_state.messages.append(Message(content=response["response"], type="ai"))
            
            # Handle voice synthesis
            logger.info("–ó–∞–ø—Ä–æ—Å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –≤–æ–ø—Ä–æ—Å–∞")
            reply_audio = get_voice(response["response"])
            question_audio = get_voice(prompt)
            
            # Create audio players
            col1, col2 = st.columns(2)
            with col1:
                st.write("–û–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:")
                st.audio(reply_audio, format="audio/mpeg", loop=False)
            with col2:
                st.write("–û–∑–≤—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å:")
                st.audio(question_audio, format="audio/mpeg", loop=False)
            
            # Display sources
            logger.debug(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ {len(response['context_sources'])} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            for i, source in enumerate(response["context_sources"], 1):
                with st.expander(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ N{i}:** [{source['source']}]"):
                    st.write(source["content"])

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main(): {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    try:
        load_dotenv()
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        main()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")